name: CI App
on:
  [workflow_dispatch, push]
concurrency: ci-app-${{ github.ref }}
jobs:
  gitleaks:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: run gitleaks docker
        run: |
          docker run -v ${PWD}:/path zricethezav/gitleaks:latest detect --source="/path/" -v -l debug --no-git
  pycharm:
    runs-on: ubuntu-latest
    needs: [gitleaks]
    name: Pycharm-security check
    steps:
      - name: checkout git repository
        uses: actions/checkout@v3

      - name: Run PyCharm Security
        uses: tonybaloney/pycharm-security@master
        with: 
          fail_on_warnings: "no"
  docker-grype-project:
    name: Grype (Anchore) Project Scan
    needs: [gitleaks]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Scan current project with Grype (Anchore)
        id: scan-project
        uses: anchore/scan-action@v3
        with:
          path: "."
          fail-build: false
          output-format: table

  docker-build:
      name: Build Docker image
      runs-on: ubuntu-latest
      needs: [pycharm, docker-grype-project]
      outputs:
        full_docker_image_tag: ${{ steps.build_image.outputs.full_docker_image_tag }}
        image_tag: ${{ steps.build_image.outputs.image_tag }}
      steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-8)
          BRANCH_TAG=$(echo "${GITHUB_REF##*/}")
          LOWERCASE_ECR_REPOSITORY=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="${BRANCH_TAG}-${SHORT_SHA}"
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
          echo "BRANCH_TAG=${BRANCH_TAG}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "LOWERCASE_ECR_REPOSITORY=${LOWERCASE_ECR_REPOSITORY}" >> $GITHUB_ENV

      - name: Build and tag image
        id: build_image
        env:
          REGISTRY: ghcr.io
          ECR_REPOSITORY: ${{ env.LOWERCASE_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "REGISTRY: $REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          echo "Building and tagging $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ..."
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          mkdir -p /tmp
          docker save "$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > /tmp/docker-image.tar
          echo "full_docker_image_tag=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: /tmp/docker-image.tar
          retention-days: 1

  docker-grype:
    name: Grype (Anchore) Docker Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/docker-image.tar

      - name: Scan image wih Grype (Anchore)
        id: scan-image
        uses: anchore/scan-action@v3
        with:
          image: "${{ needs.docker-build.outputs.full_docker_image_tag }}"
          output-format: table
          fail-build: true

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Deploy the thing
        run: |
          echo Deploying ðŸš€   
